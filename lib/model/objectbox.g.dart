// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

// ignore: depend_on_referenced_packages
import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'notes.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
    id: const IdUid(1, 1090748150154104858),
    name: 'Notes',
    lastPropertyId: const IdUid(8, 6363026946042080217),
    flags: 0,
    properties: <ModelProperty>[
      ModelProperty(
        id: const IdUid(1, 8964032075837043087),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      ModelProperty(
        id: const IdUid(2, 2063579690147786388),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(3, 1858473947592349511),
        name: 'body',
        type: 9,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(4, 5309823537149945808),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(5, 2688336071133289679),
        name: 'color',
        type: 9,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(6, 1392973698355642820),
        name: 'created',
        type: 10,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(7, 1268093537799322624),
        name: 'lastEdit',
        type: 10,
        flags: 0,
      ),
      ModelProperty(
        id: const IdUid(8, 6363026946042080217),
        name: 'pinned',
        type: 1,
        flags: 0,
      )
    ],
    relations: <ModelRelation>[],
    backlinks: <ModelBacklink>[],
  )
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async =>
    Store(
      getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup,
    );

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
    entities: _entities,
    lastEntityId: const IdUid(1, 1090748150154104858),
    lastIndexId: const IdUid(0, 0),
    lastRelationId: const IdUid(0, 0),
    lastSequenceId: const IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, EntityDefinition>{
    Notes: EntityDefinition<Notes>(
      model: _entities[0],
      toOneRelations: (Notes object) => [],
      toManyRelations: (Notes object) => {},
      getId: (Notes object) => object.id,
      setId: (Notes object, int id) {
        object.id = id;
      },
      objectToFB: (Notes object, fb.Builder fbb) {
        final titleOffset =
            object.title == null ? null : fbb.writeString(object.title!);
        final bodyOffset =
            object.body == null ? null : fbb.writeString(object.body!);
        final categoryOffset =
            object.category == null ? null : fbb.writeString(object.category!);
        final colorOffset =
            object.color == null ? null : fbb.writeString(object.color!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, bodyOffset);
        fbb.addOffset(3, categoryOffset);
        fbb.addOffset(4, colorOffset);
        fbb.addInt64(5, object.created?.millisecondsSinceEpoch);
        fbb.addInt64(6, object.lastEdit?.millisecondsSinceEpoch);
        fbb.addBool(7, object.pinned);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdValue =
            const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
        final lastEditValue =
            const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
        final object = Notes(
          id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4),
          title: const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6),
          body: const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8),
          category: const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10),
          color: const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12),
          created: createdValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdValue),
          lastEdit: lastEditValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastEditValue),
          pinned:
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18),
        );

        return object;
      },
    )
  };

  return ModelDefinition(model, bindings);
}

/// [Notes] entity fields to define ObjectBox queries.
class Notes_ {
  /// see [Notes.id]
  static final id = QueryIntegerProperty<Notes>(_entities[0].properties[0]);

  /// see [Notes.title]
  static final title = QueryStringProperty<Notes>(_entities[0].properties[1]);

  /// see [Notes.body]
  static final body = QueryStringProperty<Notes>(_entities[0].properties[2]);

  /// see [Notes.category]
  static final category =
      QueryStringProperty<Notes>(_entities[0].properties[3]);

  /// see [Notes.color]
  static final color = QueryStringProperty<Notes>(_entities[0].properties[4]);

  /// see [Notes.created]
  static final created =
      QueryIntegerProperty<Notes>(_entities[0].properties[5]);

  /// see [Notes.lastEdit]
  static final lastEdit =
      QueryIntegerProperty<Notes>(_entities[0].properties[6]);

  /// see [Notes.pinned]
  static final pinned = QueryBooleanProperty<Notes>(_entities[0].properties[7]);
}
